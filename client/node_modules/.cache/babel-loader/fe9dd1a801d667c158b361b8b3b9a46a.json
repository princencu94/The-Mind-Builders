{"ast":null,"code":"function assertNever(x) {\n  throw new Error('Unexpected object: ' + x);\n}\n\nvar Focus;\n\n(function (Focus) {\n  /** Focus the first non-disabled item. */\n  Focus[Focus[\"First\"] = 0] = \"First\";\n  /** Focus the previous non-disabled item. */\n\n  Focus[Focus[\"Previous\"] = 1] = \"Previous\";\n  /** Focus the next non-disabled item. */\n\n  Focus[Focus[\"Next\"] = 2] = \"Next\";\n  /** Focus the last non-disabled item. */\n\n  Focus[Focus[\"Last\"] = 3] = \"Last\";\n  /** Focus a specific item based on the `id` of the item. */\n\n  Focus[Focus[\"Specific\"] = 4] = \"Specific\";\n  /** Focus no items at all. */\n\n  Focus[Focus[\"Nothing\"] = 5] = \"Nothing\";\n})(Focus || (Focus = {}));\n\nfunction calculateActiveIndex(action, resolvers) {\n  var items = resolvers.resolveItems();\n  if (items.length <= 0) return null;\n  var currentActiveIndex = resolvers.resolveActiveIndex();\n  var activeIndex = currentActiveIndex != null ? currentActiveIndex : -1;\n\n  var nextActiveIndex = function () {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(function (item) {\n          return !resolvers.resolveDisabled(item);\n        });\n\n      case Focus.Previous:\n        {\n          var idx = items.slice().reverse().findIndex(function (item, idx, all) {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false;\n            return !resolvers.resolveDisabled(item);\n          });\n          if (idx === -1) return idx;\n          return items.length - 1 - idx;\n        }\n\n      case Focus.Next:\n        return items.findIndex(function (item, idx) {\n          if (idx <= activeIndex) return false;\n          return !resolvers.resolveDisabled(item);\n        });\n\n      case Focus.Last:\n        {\n          var _idx = items.slice().reverse().findIndex(function (item) {\n            return !resolvers.resolveDisabled(item);\n          });\n\n          if (_idx === -1) return _idx;\n          return items.length - 1 - _idx;\n        }\n\n      case Focus.Specific:\n        return items.findIndex(function (item) {\n          return resolvers.resolveId(item) === action.id;\n        });\n\n      case Focus.Nothing:\n        return null;\n\n      default:\n        assertNever(action);\n    }\n  }();\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex;\n}\n\nexport { Focus, calculateActiveIndex };","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,CAAqBC,CAArB;EACE,MAAM,IAAIC,KAAJ,CAAU,wBAAwBD,CAAlC,CAAN;AACD;;IAEWE;;AAAZ,WAAYA,KAAZ,EAAYA;EACV;EACAA;EAEA;;EACAA;EAEA;;EACAA;EAEA;;EACAA;EAEA;;EACAA;EAEA;;EACAA;AAjBF,GAAYA,KAAK,KAALA,KAAK,MAAjB;;SAoBgBC,qBACdC,QACAC;EAOA,IAAIC,KAAK,GAAGD,SAAS,CAACE,YAAVF,EAAZ;EACA,IAAIC,KAAK,CAACE,MAANF,IAAgB,CAApB,EAAuB,OAAO,IAAP;EAEvB,IAAIG,kBAAkB,GAAGJ,SAAS,CAACK,kBAAVL,EAAzB;EACA,IAAIM,WAAW,GAAGF,kBAAH,QAAGA,wBAAsB,CAAC,CAAzC;;EAEA,IAAIG,eAAe,GAAI;IACrB,QAAQR,MAAM,CAACS,KAAf;MACE,KAAKX,KAAK,CAACY,KAAX;QACE,OAAOR,KAAK,CAACS,SAANT,CAAgB,gBAAI;UAAA,OAAI,CAACD,SAAS,CAACW,eAAVX,CAA0BY,IAA1BZ,CAAL;QAApB,EAAP;;MAEF,KAAKH,KAAK,CAACgB,QAAX;QAAqB;UACnB,IAAIC,GAAG,GAAGb,KAAK,CACZc,KADOd,GAEPe,OAFOf,GAGPS,SAHOT,CAGG,UAACW,IAAD,EAAOE,GAAP,EAAYG,GAAZ;YACT,IAAIX,WAAW,KAAK,CAAC,CAAjBA,IAAsBW,GAAG,CAACd,MAAJc,GAAaH,GAAbG,GAAmB,CAAnBA,IAAwBX,WAAlD,EAA+D,OAAO,KAAP;YAC/D,OAAO,CAACN,SAAS,CAACW,eAAVX,CAA0BY,IAA1BZ,CAAR;UALM,EAAV;UAOA,IAAIc,GAAG,KAAK,CAAC,CAAb,EAAgB,OAAOA,GAAP;UAChB,OAAOb,KAAK,CAACE,MAANF,GAAe,CAAfA,GAAmBa,GAA1B;QACD;;MAED,KAAKjB,KAAK,CAACqB,IAAX;QACE,OAAOjB,KAAK,CAACS,SAANT,CAAgB,UAACW,IAAD,EAAOE,GAAP;UACrB,IAAIA,GAAG,IAAIR,WAAX,EAAwB,OAAO,KAAP;UACxB,OAAO,CAACN,SAAS,CAACW,eAAVX,CAA0BY,IAA1BZ,CAAR;QAFK,EAAP;;MAKF,KAAKH,KAAK,CAACsB,IAAX;QAAiB;UACf,IAAIL,IAAG,GAAGb,KAAK,CACZc,KADOd,GAEPe,OAFOf,GAGPS,SAHOT,CAGG,gBAAI;YAAA,OAAI,CAACD,SAAS,CAACW,eAAVX,CAA0BY,IAA1BZ,CAAL;UAHP,EAAV;;UAIA,IAAIc,IAAG,KAAK,CAAC,CAAb,EAAgB,OAAOA,IAAP;UAChB,OAAOb,KAAK,CAACE,MAANF,GAAe,CAAfA,GAAmBa,IAA1B;QACD;;MAED,KAAKjB,KAAK,CAACuB,QAAX;QACE,OAAOnB,KAAK,CAACS,SAANT,CAAgB,gBAAI;UAAA,OAAID,SAAS,CAACqB,SAAVrB,CAAoBY,IAApBZ,MAA8BD,MAAM,CAACuB,EAAzC;QAApB,EAAP;;MAEF,KAAKzB,KAAK,CAAC0B,OAAX;QACE,OAAO,IAAP;;MAEF;QACE7B,WAAW,CAACK,MAAD,CAAXL;IAtCJ;EADoB,CAAC,EAAvB;;EA2CA,OAAOa,eAAe,KAAK,CAAC,CAArBA,GAAyBH,kBAAzBG,GAA8CA,eAArD;AACD","names":["assertNever","x","Error","Focus","calculateActiveIndex","action","resolvers","items","resolveItems","length","currentActiveIndex","resolveActiveIndex","activeIndex","nextActiveIndex","focus","First","findIndex","resolveDisabled","item","Previous","idx","slice","reverse","all","Next","Last","Specific","resolveId","id","Nothing"],"sources":["../../src/utils/calculate-active-index.ts"],"sourcesContent":["function assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x)\n}\n\nexport enum Focus {\n  /** Focus the first non-disabled item. */\n  First,\n\n  /** Focus the previous non-disabled item. */\n  Previous,\n\n  /** Focus the next non-disabled item. */\n  Next,\n\n  /** Focus the last non-disabled item. */\n  Last,\n\n  /** Focus a specific item based on the `id` of the item. */\n  Specific,\n\n  /** Focus no items at all. */\n  Nothing,\n}\n\nexport function calculateActiveIndex<TItem>(\n  action: { focus: Focus.Specific; id: string } | { focus: Exclude<Focus, Focus.Specific> },\n  resolvers: {\n    resolveItems(): TItem[]\n    resolveActiveIndex(): number | null\n    resolveId(item: TItem): string\n    resolveDisabled(item: TItem): boolean\n  }\n) {\n  let items = resolvers.resolveItems()\n  if (items.length <= 0) return null\n\n  let currentActiveIndex = resolvers.resolveActiveIndex()\n  let activeIndex = currentActiveIndex ?? -1\n\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(item => !resolvers.resolveDisabled(item))\n\n      case Focus.Previous: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex((item, idx, all) => {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false\n            return !resolvers.resolveDisabled(item)\n          })\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Next:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex) return false\n          return !resolvers.resolveDisabled(item)\n        })\n\n      case Focus.Last: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex(item => !resolvers.resolveDisabled(item))\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Specific:\n        return items.findIndex(item => resolvers.resolveId(item) === action.id)\n\n      case Focus.Nothing:\n        return null\n\n      default:\n        assertNever(action)\n    }\n  })()\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex\n}\n"]},"metadata":{},"sourceType":"module"}