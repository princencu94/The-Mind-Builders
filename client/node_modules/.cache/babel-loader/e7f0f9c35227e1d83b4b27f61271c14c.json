{"ast":null,"code":"import { createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect.esm.js';\nvar interactables = /*#__PURE__*/new Set();\nvar originals = /*#__PURE__*/new Map();\n\nfunction inert(element) {\n  element.setAttribute('aria-hidden', 'true'); // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n\n  element.inert = true;\n}\n\nfunction restore(element) {\n  var original = originals.get(element);\n  if (!original) return;\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden');else element.setAttribute('aria-hidden', original['aria-hidden']); // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n\n  element.inert = original.inert;\n}\n\nfunction useInertOthers(container, enabled) {\n  if (enabled === void 0) {\n    enabled = true;\n  }\n\n  useIsoMorphicEffect(function () {\n    if (!enabled) return;\n    if (!container.current) return;\n    var element = container.current; // Mark myself as an interactable element\n\n    interactables.add(element); // Restore elements that now contain an interactable child\n\n    for (var _iterator = _createForOfIteratorHelperLoose(originals.keys()), _step; !(_step = _iterator()).done;) {\n      var original = _step.value;\n\n      if (original.contains(element)) {\n        restore(original);\n        originals[\"delete\"](original);\n      }\n    } // Collect direct children of the body\n\n\n    document.querySelectorAll('body > *').forEach(function (child) {\n      if (!(child instanceof HTMLElement)) return; // Skip non-HTMLElements\n      // Skip the interactables, and the parents of the interactables\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(interactables), _step2; !(_step2 = _iterator2()).done;) {\n        var interactable = _step2.value;\n        if (child.contains(interactable)) return;\n      } // Keep track of the elements\n\n\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert\n        }); // Mutate the element\n\n        inert(child);\n      }\n    });\n    return function () {\n      // Inert is disabled on the current element\n      interactables[\"delete\"](element); // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(function (child) {\n          if (!(child instanceof HTMLElement)) return; // Skip non-HTMLElements\n          // Skip already inert parents\n\n          if (originals.has(child)) return; // Skip the interactables, and the parents of the interactables\n\n          for (var _iterator3 = _createForOfIteratorHelperLoose(interactables), _step3; !(_step3 = _iterator3()).done;) {\n            var interactable = _step3.value;\n            if (child.contains(interactable)) return;\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert\n          }); // Mutate the element\n\n          inert(child);\n        });\n      } else {\n        for (var _iterator4 = _createForOfIteratorHelperLoose(originals.keys()), _step4; !(_step4 = _iterator4()).done;) {\n          var _element = _step4.value; // Restore\n\n          restore(_element); // Cleanup\n\n          originals[\"delete\"](_element);\n        }\n      }\n    };\n  }, [enabled]);\n}\n\nexport { useInertOthers };","map":{"version":3,"mappings":"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","names":["interactables","Set","originals","Map","inert","element","setAttribute","restore","original","get","removeAttribute","useInertOthers","container","enabled","useIsoMorphicEffect","current","add","keys","contains","document","querySelectorAll","forEach","child","HTMLElement","interactable","size","set","getAttribute","has"],"sources":["../../src/hooks/use-inert-others.ts"],"sourcesContent":["import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n"]},"metadata":{},"sourceType":"module"}