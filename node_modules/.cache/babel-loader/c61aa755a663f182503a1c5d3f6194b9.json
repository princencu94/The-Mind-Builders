{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useEffect, useMemo, useContext, useCallback, createContext, useRef, useState } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, forwardRefWithAs, Features } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { isFocusableElement, getFocusableElements, focusIn, Focus, FocusResult, FocusableMode } from '../../utils/focus-management.esm.js';\nimport { useWindowEvent } from '../../hooks/use-window-event.esm.js';\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';\n\nvar _reducers;\n\nvar PopoverStates;\n\n(function (PopoverStates) {\n  PopoverStates[PopoverStates[\"Open\"] = 0] = \"Open\";\n  PopoverStates[PopoverStates[\"Closed\"] = 1] = \"Closed\";\n})(PopoverStates || (PopoverStates = {}));\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"TogglePopover\"] = 0] = \"TogglePopover\";\n  ActionTypes[ActionTypes[\"ClosePopover\"] = 1] = \"ClosePopover\";\n  ActionTypes[ActionTypes[\"SetButton\"] = 2] = \"SetButton\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 3] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanel\"] = 4] = \"SetPanel\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 5] = \"SetPanelId\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.TogglePopover] = function (state) {\n  var _match;\n\n  return _extends({}, state, {\n    popoverState: match(state.popoverState, (_match = {}, _match[PopoverStates.Open] = PopoverStates.Closed, _match[PopoverStates.Closed] = PopoverStates.Open, _match))\n  });\n}, _reducers[ActionTypes.ClosePopover] = function (state) {\n  if (state.popoverState === PopoverStates.Closed) return state;\n  return _extends({}, state, {\n    popoverState: PopoverStates.Closed\n  });\n}, _reducers[ActionTypes.SetButton] = function (state, action) {\n  if (state.button === action.button) return state;\n  return _extends({}, state, {\n    button: action.button\n  });\n}, _reducers[ActionTypes.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers[ActionTypes.SetPanel] = function (state, action) {\n  if (state.panel === action.panel) return state;\n  return _extends({}, state, {\n    panel: action.panel\n  });\n}, _reducers[ActionTypes.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers);\nvar PopoverContext = /*#__PURE__*/createContext(null);\nPopoverContext.displayName = 'PopoverContext';\n\nfunction usePopoverContext(component) {\n  var context = useContext(PopoverContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Popover.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext);\n    throw err;\n  }\n\n  return context;\n}\n\nvar PopoverAPIContext = /*#__PURE__*/createContext(null);\nPopoverAPIContext.displayName = 'PopoverAPIContext';\n\nfunction usePopoverAPIContext(component) {\n  var context = useContext(PopoverAPIContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Popover.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext);\n    throw err;\n  }\n\n  return context;\n}\n\nvar PopoverGroupContext = /*#__PURE__*/createContext(null);\nPopoverGroupContext.displayName = 'PopoverGroupContext';\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext);\n}\n\nvar PopoverPanelContext = /*#__PURE__*/createContext(null);\nPopoverPanelContext.displayName = 'PopoverPanelContext';\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext);\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_POPOVER_TAG = 'div';\n\nfunction Popover(props) {\n  var _match2;\n\n  var buttonId = \"headlessui-popover-button-\" + useId();\n  var panelId = \"headlessui-popover-panel-\" + useId();\n  var reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId: buttonId,\n    panel: null,\n    panelId: panelId\n  });\n  var _reducerBag$ = reducerBag[0],\n      popoverState = _reducerBag$.popoverState,\n      button = _reducerBag$.button,\n      panel = _reducerBag$.panel,\n      dispatch = reducerBag[1];\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var registerBag = useMemo(function () {\n    return {\n      buttonId: buttonId,\n      panelId: panelId,\n      close: function close() {\n        return dispatch({\n          type: ActionTypes.ClosePopover\n        });\n      }\n    };\n  }, [buttonId, panelId, dispatch]);\n  var groupContext = usePopoverGroupContext();\n  var registerPopover = groupContext == null ? void 0 : groupContext.registerPopover;\n  var isFocusWithinPopoverGroup = useCallback(function () {\n    var _groupContext$isFocus;\n\n    return (_groupContext$isFocus = groupContext == null ? void 0 : groupContext.isFocusWithinPopoverGroup()) != null ? _groupContext$isFocus : (button == null ? void 0 : button.contains(document.activeElement)) || (panel == null ? void 0 : panel.contains(document.activeElement));\n  }, [groupContext, button, panel]);\n  useEffect(function () {\n    return registerPopover == null ? void 0 : registerPopover(registerBag);\n  }, [registerPopover, registerBag]); // Handle focus out\n\n  useWindowEvent('focus', function () {\n    if (popoverState !== PopoverStates.Open) return;\n    if (isFocusWithinPopoverGroup()) return;\n    if (!button) return;\n    if (!panel) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, true); // Handle outside click\n\n  useWindowEvent('mousedown', function (event) {\n    var target = event.target;\n    if (popoverState !== PopoverStates.Open) return;\n    if (button == null ? void 0 : button.contains(target)) return;\n    if (panel == null ? void 0 : panel.contains(target)) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault();\n      button == null ? void 0 : button.focus();\n    }\n  });\n  var close = useCallback(function (focusableElement) {\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n\n    var restoreElement = function () {\n      if (!focusableElement) return button;\n      if (focusableElement instanceof HTMLElement) return focusableElement;\n      if (focusableElement.current instanceof HTMLElement) return focusableElement.current;\n      return button;\n    }();\n\n    restoreElement == null ? void 0 : restoreElement.focus();\n  }, [dispatch, button]);\n  var api = useMemo(function () {\n    return {\n      close: close\n    };\n  }, [close]);\n  var slot = useMemo(function () {\n    return {\n      open: popoverState === PopoverStates.Open,\n      close: close\n    };\n  }, [popoverState, close]);\n  return React.createElement(PopoverContext.Provider, {\n    value: reducerBag\n  }, React.createElement(PopoverAPIContext.Provider, {\n    value: api\n  }, React.createElement(OpenClosedProvider, {\n    value: match(popoverState, (_match2 = {}, _match2[PopoverStates.Open] = State.Open, _match2[PopoverStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: props,\n    slot: slot,\n    defaultTag: DEFAULT_POPOVER_TAG,\n    name: 'Popover'\n  }))));\n} // ---\n\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _usePopoverContext = usePopoverContext([Popover.name, Button.name].join('.')),\n      state = _usePopoverContext[0],\n      dispatch = _usePopoverContext[1];\n\n  var internalButtonRef = useRef(null);\n  var groupContext = usePopoverGroupContext();\n  var closeOthers = groupContext == null ? void 0 : groupContext.closeOthers;\n  var panelContext = usePopoverPanelContext();\n  var isWithinPanel = panelContext === null ? false : panelContext === state.panelId;\n  var buttonRef = useSyncRefs(internalButtonRef, ref, isWithinPanel ? null : function (button) {\n    return dispatch({\n      type: ActionTypes.SetButton,\n      button: button\n    });\n  });\n  var withinPanelButtonRef = useSyncRefs(internalButtonRef, ref); // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n  var activeElementRef = useRef(null);\n  var previousActiveElementRef = useRef(typeof window === 'undefined' ? null : document.activeElement);\n  useWindowEvent('focus', function () {\n    previousActiveElementRef.current = activeElementRef.current;\n    activeElementRef.current = document.activeElement;\n  }, true);\n  var handleKeyDown = useCallback(function (event) {\n    var _state$button;\n\n    if (isWithinPanel) {\n      if (state.popoverState === PopoverStates.Closed) return;\n\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ClosePopover\n          });\n          (_state$button = state.button) == null ? void 0 : _state$button.focus(); // Re-focus the original opening Button\n\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          dispatch({\n            type: ActionTypes.TogglePopover\n          });\n          break;\n\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          if (!internalButtonRef.current) return;\n          if (!internalButtonRef.current.contains(document.activeElement)) return;\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ClosePopover\n          });\n          break;\n\n        case Keys.Tab:\n          if (state.popoverState !== PopoverStates.Open) return;\n          if (!state.panel) return;\n          if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n          if (event.shiftKey) {\n            var _state$button2; // Check if the last focused element exists, and check that it is not inside button or panel itself\n\n\n            if (!previousActiveElementRef.current) return;\n            if ((_state$button2 = state.button) == null ? void 0 : _state$button2.contains(previousActiveElementRef.current)) return;\n            if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n            var focusableElements = getFocusableElements();\n            var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n            var buttonIdx = focusableElements.indexOf(state.button);\n            if (buttonIdx > previousIdx) return;\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.Last);\n          } else {\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.First);\n          }\n\n          break;\n      }\n    }\n  }, [dispatch, state.popoverState, state.buttonId, state.button, state.panel, internalButtonRef, closeOthers, isWithinPanel]);\n  var handleKeyUp = useCallback(function (event) {\n    var _state$button3;\n\n    if (isWithinPanel) return;\n\n    if (event.key === Keys.Space) {\n      // Required for firefox, event.preventDefault() in handleKeyDown for\n      // the Space key doesn't cancel the handleKeyUp, which in turn\n      // triggers a *click*.\n      event.preventDefault();\n    }\n\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!state.panel) return;\n    if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n    switch (event.key) {\n      case Keys.Tab:\n        // Check if the last focused element exists, and check that it is not inside button or panel itself\n        if (!previousActiveElementRef.current) return;\n        if ((_state$button3 = state.button) == null ? void 0 : _state$button3.contains(previousActiveElementRef.current)) return;\n        if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n        var focusableElements = getFocusableElements();\n        var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n        var buttonIdx = focusableElements.indexOf(state.button);\n        if (buttonIdx > previousIdx) return;\n        event.preventDefault();\n        event.stopPropagation();\n        focusIn(state.panel, Focus.Last);\n        break;\n    }\n  }, [state.popoverState, state.panel, state.button, isWithinPanel]);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n\n    if (isWithinPanel) {\n      var _state$button4;\n\n      dispatch({\n        type: ActionTypes.ClosePopover\n      });\n      (_state$button4 = state.button) == null ? void 0 : _state$button4.focus(); // Re-focus the original opening Button\n    } else {\n      var _state$button5;\n\n      if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n      (_state$button5 = state.button) == null ? void 0 : _state$button5.focus();\n      dispatch({\n        type: ActionTypes.TogglePopover\n      });\n    }\n  }, [dispatch, state.button, state.popoverState, state.buttonId, props.disabled, closeOthers, isWithinPanel]);\n  var slot = useMemo(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open\n    };\n  }, [state]);\n  var type = useResolveButtonType(props, internalButtonRef);\n  var passthroughProps = props;\n  var propsWeControl = isWithinPanel ? {\n    ref: withinPanelButtonRef,\n    type: type,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  } : {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: type,\n    'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n    'aria-controls': state.panel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button'\n  });\n}); // ---\n\nvar DEFAULT_OVERLAY_TAG = 'div';\nvar OverlayRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Overlay = /*#__PURE__*/forwardRefWithAs(function Overlay(props, ref) {\n  var _usePopoverContext2 = usePopoverContext([Popover.name, Overlay.name].join('.')),\n      popoverState = _usePopoverContext2[0].popoverState,\n      dispatch = _usePopoverContext2[1];\n\n  var overlayRef = useSyncRefs(ref);\n  var id = \"headlessui-popover-overlay-\" + useId();\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return popoverState === PopoverStates.Open;\n  }();\n\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, [dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: popoverState === PopoverStates.Open\n    };\n  }, [popoverState]);\n  var propsWeControl = {\n    ref: overlayRef,\n    id: id,\n    'aria-hidden': true,\n    onClick: handleClick\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible: visible,\n    name: 'Popover.Overlay'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _props$focus = props.focus,\n      focus = _props$focus === void 0 ? false : _props$focus,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"focus\"]);\n\n  var _usePopoverContext3 = usePopoverContext([Popover.name, Panel.name].join('.')),\n      state = _usePopoverContext3[0],\n      dispatch = _usePopoverContext3[1];\n\n  var _usePopoverAPIContext = usePopoverAPIContext([Popover.name, Panel.name].join('.')),\n      close = _usePopoverAPIContext.close;\n\n  var internalPanelRef = useRef(null);\n  var panelRef = useSyncRefs(internalPanelRef, ref, function (panel) {\n    dispatch({\n      type: ActionTypes.SetPanel,\n      panel: panel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.popoverState === PopoverStates.Open;\n  }();\n\n  var handleKeyDown = useCallback(function (event) {\n    var _state$button6;\n\n    switch (event.key) {\n      case Keys.Escape:\n        if (state.popoverState !== PopoverStates.Open) return;\n        if (!internalPanelRef.current) return;\n        if (!internalPanelRef.current.contains(document.activeElement)) return;\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes.ClosePopover\n        });\n        (_state$button6 = state.button) == null ? void 0 : _state$button6.focus();\n        break;\n    }\n  }, [state, internalPanelRef, dispatch]); // Unlink on \"unmount\" myself\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes.SetPanel,\n        panel: null\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  useEffect(function () {\n    var _props$unmount;\n\n    if (props[\"static\"]) return;\n\n    if (state.popoverState === PopoverStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes.SetPanel,\n        panel: null\n      });\n    }\n  }, [state.popoverState, props.unmount, props[\"static\"], dispatch]); // Move focus within panel\n\n  useEffect(function () {\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    var activeElement = document.activeElement;\n    if (internalPanelRef.current.contains(activeElement)) return; // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First);\n  }, [focus, internalPanelRef, state.popoverState]); // Handle Tab / Shift+Tab focus positioning\n\n  useWindowEvent('keydown', function (event) {\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if (event.key !== Keys.Tab) return;\n    if (!document.activeElement) return;\n    if (!internalPanelRef.current) return;\n    if (!internalPanelRef.current.contains(document.activeElement)) return; // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n\n    event.preventDefault();\n    var result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next);\n\n    if (result === FocusResult.Underflow) {\n      var _state$button7;\n\n      return (_state$button7 = state.button) == null ? void 0 : _state$button7.focus();\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return;\n      var elements = getFocusableElements();\n      var buttonIdx = elements.indexOf(state.button);\n      var nextElements = elements.splice(buttonIdx + 1) // Elements after button\n      .filter(function (element) {\n        var _internalPanelRef$cur;\n\n        return !((_internalPanelRef$cur = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur.contains(element));\n      }); // Ignore items in panel\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First);\n      }\n    }\n  }); // Handle focus out when we are in special \"focus\" mode\n\n  useWindowEvent('focus', function () {\n    var _internalPanelRef$cur2;\n\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if ((_internalPanelRef$cur2 = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur2.contains(document.activeElement)) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, true);\n  var slot = useMemo(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open,\n      close: close\n    };\n  }, [state, close]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown\n  };\n  return React.createElement(PopoverPanelContext.Provider, {\n    value: state.panelId\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Popover.Panel'\n  }));\n}); // ---\n\nvar DEFAULT_GROUP_TAG = 'div';\n\nfunction Group(props) {\n  var groupRef = useRef(null);\n\n  var _useState = useState([]),\n      popovers = _useState[0],\n      setPopovers = _useState[1];\n\n  var unregisterPopover = useCallback(function (registerbag) {\n    setPopovers(function (existing) {\n      var idx = existing.indexOf(registerbag);\n\n      if (idx !== -1) {\n        var clone = existing.slice();\n        clone.splice(idx, 1);\n        return clone;\n      }\n\n      return existing;\n    });\n  }, [setPopovers]);\n  var registerPopover = useCallback(function (registerbag) {\n    setPopovers(function (existing) {\n      return [].concat(existing, [registerbag]);\n    });\n    return function () {\n      return unregisterPopover(registerbag);\n    };\n  }, [setPopovers, unregisterPopover]);\n  var isFocusWithinPopoverGroup = useCallback(function () {\n    var _groupRef$current;\n\n    var element = document.activeElement;\n    if ((_groupRef$current = groupRef.current) == null ? void 0 : _groupRef$current.contains(element)) return true; // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n\n    return popovers.some(function (bag) {\n      var _document$getElementB, _document$getElementB2;\n\n      return ((_document$getElementB = document.getElementById(bag.buttonId)) == null ? void 0 : _document$getElementB.contains(element)) || ((_document$getElementB2 = document.getElementById(bag.panelId)) == null ? void 0 : _document$getElementB2.contains(element));\n    });\n  }, [groupRef, popovers]);\n  var closeOthers = useCallback(function (buttonId) {\n    for (var _iterator = _createForOfIteratorHelperLoose(popovers), _step; !(_step = _iterator()).done;) {\n      var popover = _step.value;\n      if (popover.buttonId !== buttonId) popover.close();\n    }\n  }, [popovers]);\n  var contextBag = useMemo(function () {\n    return {\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup: isFocusWithinPopoverGroup,\n      closeOthers: closeOthers\n    };\n  }, [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]);\n  var slot = useMemo(function () {\n    return {};\n  }, []);\n  var propsWeControl = {\n    ref: groupRef\n  };\n  var passthroughProps = props;\n  return React.createElement(PopoverGroupContext.Provider, {\n    value: contextBag\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_GROUP_TAG,\n    name: 'Popover.Group'\n  }));\n} // ---\n\n\nPopover.Button = Button;\nPopover.Overlay = Overlay;\nPopover.Panel = Panel;\nPopover.Group = Group;\nexport { Popover };","map":{"version":3,"mappings":"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","names":["PopoverStates","ActionTypes","reducers","TogglePopover","state","popoverState","match","Open","Closed","ClosePopover","SetButton","action","button","SetButtonId","buttonId","SetPanel","panel","SetPanelId","panelId","PopoverContext","createContext","displayName","usePopoverContext","component","context","useContext","err","Error","Popover","name","captureStackTrace","PopoverAPIContext","usePopoverAPIContext","PopoverGroupContext","usePopoverGroupContext","PopoverPanelContext","usePopoverPanelContext","stateReducer","type","DEFAULT_POPOVER_TAG","props","useId","reducerBag","useReducer","dispatch","useEffect","registerBag","useMemo","close","groupContext","registerPopover","isFocusWithinPopoverGroup","useCallback","contains","document","activeElement","useWindowEvent","target","event","isFocusableElement","FocusableMode","Loose","preventDefault","focus","focusableElement","restoreElement","HTMLElement","current","api","slot","open","React","Provider","value","OpenClosedProvider","State","render","defaultTag","DEFAULT_BUTTON_TAG","Button","forwardRefWithAs","ref","join","internalButtonRef","useRef","closeOthers","panelContext","isWithinPanel","buttonRef","useSyncRefs","withinPanelButtonRef","activeElementRef","previousActiveElementRef","window","handleKeyDown","key","Keys","Space","Enter","stopPropagation","Escape","Tab","shiftKey","_state$button2","focusableElements","getFocusableElements","previousIdx","indexOf","buttonIdx","focusIn","Focus","Last","First","handleKeyUp","_state$button3","handleClick","isDisabledReactIssue7711","currentTarget","disabled","useResolveButtonType","passthroughProps","propsWeControl","onKeyDown","onClick","id","undefined","onKeyUp","DEFAULT_OVERLAY_TAG","OverlayRenderFeatures","Features","RenderStrategy","Static","Overlay","overlayRef","usesOpenClosedState","useOpenClosed","visible","features","DEFAULT_PANEL_TAG","PanelRenderFeatures","Panel","_props$focus","internalPanelRef","panelRef","unmount","result","Previous","Next","FocusResult","Underflow","_state$button7","Overflow","elements","nextElements","splice","filter","_internalPanelRef$cur","element","body","_internalPanelRef$cur2","DEFAULT_GROUP_TAG","Group","groupRef","useState","popovers","setPopovers","unregisterPopover","registerbag","idx","existing","clone","slice","_groupRef$current","some","getElementById","bag","_document$getElementB2","popover","contextBag"],"sources":["../../../src/components/popover/popover.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport {\n  getFocusableElements,\n  Focus,\n  focusIn,\n  FocusResult,\n  isFocusableElement,\n  FocusableMode,\n} from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum PopoverStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  popoverState: PopoverStates\n\n  button: HTMLElement | null\n  buttonId: string\n  panel: HTMLElement | null\n  panelId: string\n}\n\nenum ActionTypes {\n  TogglePopover,\n  ClosePopover,\n\n  SetButton,\n  SetButtonId,\n  SetPanel,\n  SetPanelId,\n}\n\ntype Actions =\n  | { type: ActionTypes.TogglePopover }\n  | { type: ActionTypes.ClosePopover }\n  | { type: ActionTypes.SetButton; button: HTMLElement | null }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanel; panel: HTMLElement | null }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.TogglePopover]: state => ({\n    ...state,\n    popoverState: match(state.popoverState, {\n      [PopoverStates.Open]: PopoverStates.Closed,\n      [PopoverStates.Closed]: PopoverStates.Open,\n    }),\n  }),\n  [ActionTypes.ClosePopover](state) {\n    if (state.popoverState === PopoverStates.Closed) return state\n    return { ...state, popoverState: PopoverStates.Closed }\n  },\n  [ActionTypes.SetButton](state, action) {\n    if (state.button === action.button) return state\n    return { ...state, button: action.button }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanel](state, action) {\n    if (state.panel === action.panel) return state\n    return { ...state, panel: action.panel }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet PopoverContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nPopoverContext.displayName = 'PopoverContext'\n\nfunction usePopoverContext(component: string) {\n  let context = useContext(PopoverContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nPopoverAPIContext.displayName = 'PopoverAPIContext'\n\nfunction usePopoverAPIContext(component: string) {\n  let context = useContext(PopoverAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverGroupContext = createContext<{\n  registerPopover(registerbag: PopoverRegisterBag): void\n  unregisterPopover(registerbag: PopoverRegisterBag): void\n  isFocusWithinPopoverGroup(): boolean\n  closeOthers(buttonId: string): void\n} | null>(null)\nPopoverGroupContext.displayName = 'PopoverGroupContext'\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext)\n}\n\nlet PopoverPanelContext = createContext<string | null>(null)\nPopoverPanelContext.displayName = 'PopoverPanelContext'\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext)\n}\n\ninterface PopoverRegisterBag {\n  buttonId: string\n  panelId: string\n  close(): void\n}\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_POPOVER_TAG = 'div' as const\ninterface PopoverRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Popover<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(\n  props: Props<TTag, PopoverRenderPropArg>\n) {\n  let buttonId = `headlessui-popover-button-${useId()}`\n  let panelId = `headlessui-popover-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n  } as StateDefinition)\n  let [{ popoverState, button, panel }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let registerBag = useMemo(\n    () => ({ buttonId, panelId, close: () => dispatch({ type: ActionTypes.ClosePopover }) }),\n    [buttonId, panelId, dispatch]\n  )\n\n  let groupContext = usePopoverGroupContext()\n  let registerPopover = groupContext?.registerPopover\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    return (\n      groupContext?.isFocusWithinPopoverGroup() ??\n      (button?.contains(document.activeElement) || panel?.contains(document.activeElement))\n    )\n  }, [groupContext, button, panel])\n\n  useEffect(() => registerPopover?.(registerBag), [registerPopover, registerBag])\n\n  // Handle focus out\n  useWindowEvent(\n    'focus',\n    () => {\n      if (popoverState !== PopoverStates.Open) return\n      if (isFocusWithinPopoverGroup()) return\n      if (!button) return\n      if (!panel) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (popoverState !== PopoverStates.Open) return\n\n    if (button?.contains(target)) return\n    if (panel?.contains(target)) return\n\n    dispatch({ type: ActionTypes.ClosePopover })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      button?.focus()\n    }\n  })\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.ClosePopover })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return button\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return button\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, button]\n  )\n\n  let api = useMemo<ContextType<typeof PopoverAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<PopoverRenderPropArg>(\n    () => ({ open: popoverState === PopoverStates.Open, close }),\n    [popoverState, close]\n  )\n\n  return (\n    <PopoverContext.Provider value={reducerBag}>\n      <PopoverAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(popoverState, {\n            [PopoverStates.Open]: State.Open,\n            [PopoverStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props,\n            slot,\n            defaultTag: DEFAULT_POPOVER_TAG,\n            name: 'Popover',\n          })}\n        </OpenClosedProvider>\n      </PopoverAPIContext.Provider>\n    </PopoverContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = usePopoverContext([Popover.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  let groupContext = usePopoverGroupContext()\n  let closeOthers = groupContext?.closeOthers\n\n  let panelContext = usePopoverPanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let buttonRef = useSyncRefs(\n    internalButtonRef,\n    ref,\n    isWithinPanel ? null : button => dispatch({ type: ActionTypes.SetButton, button })\n  )\n  let withinPanelButtonRef = useSyncRefs(internalButtonRef, ref)\n\n  // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n  let activeElementRef = useRef<Element | null>(null)\n  let previousActiveElementRef = useRef<Element | null>(\n    typeof window === 'undefined' ? null : document.activeElement\n  )\n  useWindowEvent(\n    'focus',\n    () => {\n      previousActiveElementRef.current = activeElementRef.current\n      activeElementRef.current = document.activeElement\n    },\n    true\n  )\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.popoverState === PopoverStates.Closed) return\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            state.button?.focus() // Re-focus the original opening Button\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n            dispatch({ type: ActionTypes.TogglePopover })\n            break\n\n          case Keys.Escape:\n            if (state.popoverState !== PopoverStates.Open) return closeOthers?.(state.buttonId)\n            if (!internalButtonRef.current) return\n            if (!internalButtonRef.current.contains(document.activeElement)) return\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            break\n\n          case Keys.Tab:\n            if (state.popoverState !== PopoverStates.Open) return\n            if (!state.panel) return\n            if (!state.button) return\n\n            // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n            if (event.shiftKey) {\n              // Check if the last focused element exists, and check that it is not inside button or panel itself\n              if (!previousActiveElementRef.current) return\n              if (state.button?.contains(previousActiveElementRef.current)) return\n              if (state.panel.contains(previousActiveElementRef.current)) return\n\n              // Check if the last focused element is *after* the button in the DOM\n              let focusableElements = getFocusableElements()\n              let previousIdx = focusableElements.indexOf(\n                previousActiveElementRef.current as HTMLElement\n              )\n              let buttonIdx = focusableElements.indexOf(state.button)\n              if (buttonIdx > previousIdx) return\n\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.Last)\n            } else {\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.First)\n            }\n\n            break\n        }\n      }\n    },\n    [\n      dispatch,\n      state.popoverState,\n      state.buttonId,\n      state.button,\n      state.panel,\n      internalButtonRef,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) return\n      if (event.key === Keys.Space) {\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n      }\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!state.panel) return\n      if (!state.button) return\n\n      // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n      switch (event.key) {\n        case Keys.Tab:\n          // Check if the last focused element exists, and check that it is not inside button or panel itself\n          if (!previousActiveElementRef.current) return\n          if (state.button?.contains(previousActiveElementRef.current)) return\n          if (state.panel.contains(previousActiveElementRef.current)) return\n\n          // Check if the last focused element is *after* the button in the DOM\n          let focusableElements = getFocusableElements()\n          let previousIdx = focusableElements.indexOf(\n            previousActiveElementRef.current as HTMLElement\n          )\n          let buttonIdx = focusableElements.indexOf(state.button)\n          if (buttonIdx > previousIdx) return\n\n          event.preventDefault()\n          event.stopPropagation()\n          focusIn(state.panel, Focus.Last)\n          break\n      }\n    },\n    [state.popoverState, state.panel, state.button, isWithinPanel]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ClosePopover })\n        state.button?.focus() // Re-focus the original opening Button\n      } else {\n        if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n        state.button?.focus()\n        dispatch({ type: ActionTypes.TogglePopover })\n      }\n    },\n    [\n      dispatch,\n      state.button,\n      state.popoverState,\n      state.buttonId,\n      props.disabled,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? {\n        ref: withinPanelButtonRef,\n        type,\n        onKeyDown: handleKeyDown,\n        onClick: handleClick,\n      }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n        'aria-controls': state.panel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet OverlayRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(\n  props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl> &\n    PropsForFeatures<typeof OverlayRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [{ popoverState }, dispatch] = usePopoverContext([Popover.name, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-popover-overlay-${useId()}`\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return popoverState === PopoverStates.Open\n  })()\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    [dispatch]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible,\n    name: 'Popover.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id' | 'onKeyDown'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures> & {\n      focus?: boolean\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { focus = false, ...passthroughProps } = props\n\n  let [state, dispatch] = usePopoverContext([Popover.name, Panel.name].join('.'))\n  let { close } = usePopoverAPIContext([Popover.name, Panel.name].join('.'))\n\n  let internalPanelRef = useRef<HTMLDivElement | null>(null)\n  let panelRef = useSyncRefs(internalPanelRef, ref, panel => {\n    dispatch({ type: ActionTypes.SetPanel, panel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.popoverState === PopoverStates.Open\n  })()\n\n  let handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return\n          if (!internalPanelRef.current) return\n          if (!internalPanelRef.current.contains(document.activeElement)) return\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.ClosePopover })\n          state.button?.focus()\n          break\n      }\n    },\n    [state, internalPanelRef, dispatch]\n  )\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.SetPanel, panel: null }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (props.static) return\n\n    if (state.popoverState === PopoverStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.SetPanel, panel: null })\n    }\n  }, [state.popoverState, props.unmount, props.static, dispatch])\n\n  // Move focus within panel\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n    if (internalPanelRef.current.contains(activeElement)) return // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First)\n  }, [focus, internalPanelRef, state.popoverState])\n\n  // Handle Tab / Shift+Tab focus positioning\n  useWindowEvent('keydown', event => {\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n    if (event.key !== Keys.Tab) return\n    if (!document.activeElement) return\n    if (!internalPanelRef.current) return\n    if (!internalPanelRef.current.contains(document.activeElement)) return\n\n    // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n    event.preventDefault()\n\n    let result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next)\n\n    if (result === FocusResult.Underflow) {\n      return state.button?.focus()\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return\n\n      let elements = getFocusableElements()\n      let buttonIdx = elements.indexOf(state.button)\n\n      let nextElements = elements\n        .splice(buttonIdx + 1) // Elements after button\n        .filter(element => !internalPanelRef.current?.contains(element)) // Ignore items in panel\n\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First)\n      }\n    }\n  })\n\n  // Handle focus out when we are in special \"focus\" mode\n  useWindowEvent(\n    'focus',\n    () => {\n      if (!focus) return\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!internalPanelRef.current) return\n\n      if (internalPanelRef.current?.contains(document.activeElement as HTMLElement)) return\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <PopoverPanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Popover.Panel',\n      })}\n    </PopoverPanelContext.Provider>\n  )\n})\n\n// ---\n\nlet DEFAULT_GROUP_TAG = 'div' as const\ninterface GroupRenderPropArg {}\ntype GroupPropsWeControl = 'id'\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, GroupRenderPropArg, GroupPropsWeControl>\n) {\n  let groupRef = useRef<HTMLElement | null>(null)\n  let [popovers, setPopovers] = useState<PopoverRegisterBag[]>([])\n\n  let unregisterPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => {\n        let idx = existing.indexOf(registerbag)\n        if (idx !== -1) {\n          let clone = existing.slice()\n          clone.splice(idx, 1)\n          return clone\n        }\n        return existing\n      })\n    },\n    [setPopovers]\n  )\n\n  let registerPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => [...existing, registerbag])\n      return () => unregisterPopover(registerbag)\n    },\n    [setPopovers, unregisterPopover]\n  )\n\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    let element = document.activeElement as HTMLElement\n\n    if (groupRef.current?.contains(element)) return true\n\n    // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n    return popovers.some(bag => {\n      return (\n        document.getElementById(bag.buttonId)?.contains(element) ||\n        document.getElementById(bag.panelId)?.contains(element)\n      )\n    })\n  }, [groupRef, popovers])\n\n  let closeOthers = useCallback(\n    (buttonId: string) => {\n      for (let popover of popovers) {\n        if (popover.buttonId !== buttonId) popover.close()\n      }\n    },\n    [popovers]\n  )\n\n  let contextBag = useMemo<ContextType<typeof PopoverGroupContext>>(\n    () => ({\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup,\n      closeOthers,\n    }),\n    [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]\n  )\n\n  let slot = useMemo<GroupRenderPropArg>(() => ({}), [])\n  let propsWeControl = { ref: groupRef }\n  let passthroughProps = props\n\n  return (\n    <PopoverGroupContext.Provider value={contextBag}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PopoverGroupContext.Provider>\n  )\n}\n\n// ---\n\nPopover.Button = Button\nPopover.Overlay = Overlay\nPopover.Panel = Panel\nPopover.Group = Group\n"]},"metadata":{},"sourceType":"module"}