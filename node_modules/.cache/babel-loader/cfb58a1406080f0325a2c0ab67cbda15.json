{"ast":null,"code":"import { useState } from 'react';\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect.esm.js';\n\nfunction resolveType(props) {\n  var _props$as;\n\n  if (props.type) return props.type;\n  var tag = (_props$as = props.as) != null ? _props$as : 'button';\n  if (typeof tag === 'string' && tag.toLowerCase() === 'button') return 'button';\n  return undefined;\n}\n\nfunction useResolveButtonType(props, ref) {\n  var _useState = useState(function () {\n    return resolveType(props);\n  }),\n      type = _useState[0],\n      setType = _useState[1];\n\n  useIsoMorphicEffect(function () {\n    setType(resolveType(props));\n  }, [props.type, props.as]);\n  useIsoMorphicEffect(function () {\n    if (type) return;\n    if (!ref.current) return;\n\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute('type')) {\n      setType('button');\n    }\n  }, [type, ref]);\n  return type;\n}\n\nexport { useResolveButtonType };","map":{"version":3,"sources":["../../src/hooks/use-resolve-button-type.ts"],"names":["props","tag","useResolveButtonType","ref","type","setType","useState","resolveType","useIsoMorphicEffect"],"mappings":";;;AAIA,SAAA,WAAA,CAAA,KAAA,EAAA;;;EACE,IAAIA,KAAK,CAAT,IAAA,EAAgB,OAAOA,KAAK,CAAZ,IAAA;EAEhB,IAAIC,GAAG,GAAA,CAAA,SAAA,GAAGD,KAAK,CAAR,EAAA,KAAA,IAAA,GAAA,SAAA,GAAP,QAAA;EACA,IAAI,OAAA,GAAA,KAAA,QAAA,IAA2BC,GAAG,CAAHA,WAAAA,OAA/B,QAAA,EAA+D,OAAA,QAAA;EAE/D,OAAA,SAAA;AACD;;SAEeC,oB,CACdF,K,EACAG,G,EAAAA;kBAEsBG,QAAQ,CAAC,YAAA;IAAA,OAAMC,WAAW,CAAjB,KAAiB,CAAjB;EAAD,CAAA,C;MAAzBH,IAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAMC,OAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;EAEXG,mBAAmB,CAAC,YAAA;IAClBH,OAAO,CAACE,WAAW,CAAnBF,KAAmB,CAAZ,CAAPA;EADiB,CAAA,EAEhB,CAACL,KAAK,CAAN,IAAA,EAAaA,KAAK,CAFrBQ,EAEG,CAFgB,CAAnBA;EAIAA,mBAAmB,CAAC,YAAA;IAClB,IAAA,IAAA,EAAU;IACV,IAAI,CAACL,GAAG,CAAR,OAAA,EAAkB;;IAElB,IAAIA,GAAG,CAAHA,OAAAA,YAAAA,iBAAAA,IAA4C,CAACA,GAAG,CAAHA,OAAAA,CAAAA,YAAAA,CAAjD,MAAiDA,CAAjD,EAAmF;MACjFE,OAAO,CAAPA,QAAO,CAAPA;IACD;EANgB,CAAA,EAOhB,CAAA,IAAA,EAPHG,GAOG,CAPgB,CAAnBA;EASA,OAAA,IAAA;AACD","sourcesContent":["import { useState, MutableRefObject } from 'react'\n\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nfunction resolveType<TTag>(props: { type?: string; as?: TTag }) {\n  if (props.type) return props.type\n\n  let tag = props.as ?? 'button'\n  if (typeof tag === 'string' && tag.toLowerCase() === 'button') return 'button'\n\n  return undefined\n}\n\nexport function useResolveButtonType<TTag>(\n  props: { type?: string; as?: TTag },\n  ref: MutableRefObject<HTMLElement | null>\n) {\n  let [type, setType] = useState(() => resolveType(props))\n\n  useIsoMorphicEffect(() => {\n    setType(resolveType(props))\n  }, [props.type, props.as])\n\n  useIsoMorphicEffect(() => {\n    if (type) return\n    if (!ref.current) return\n\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute('type')) {\n      setType('button')\n    }\n  }, [type, ref])\n\n  return type\n}\n"]},"metadata":{},"sourceType":"module"}