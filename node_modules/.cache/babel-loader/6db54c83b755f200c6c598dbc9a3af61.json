{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useMemo, useCallback, createContext, useState, useContext } from 'react';\nimport { render } from '../../utils/render.esm.js';\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nvar LabelContext = /*#__PURE__*/createContext(null);\n\nfunction useLabelContext() {\n  var context = useContext(LabelContext);\n\n  if (context === null) {\n    var err = new Error('You used a <Label /> component, but it is not inside a relevant parent.');\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useLabelContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction useLabels() {\n  var _useState = useState([]),\n      labelIds = _useState[0],\n      setLabelIds = _useState[1];\n\n  return [// The actual id's as string or undefined.\n  labelIds.length > 0 ? labelIds.join(' ') : undefined, // The provider component\n  useMemo(function () {\n    return function LabelProvider(props) {\n      var register = useCallback(function (value) {\n        setLabelIds(function (existing) {\n          return [].concat(existing, [value]);\n        });\n        return function () {\n          return setLabelIds(function (existing) {\n            var clone = existing.slice();\n            var idx = clone.indexOf(value);\n            if (idx !== -1) clone.splice(idx, 1);\n            return clone;\n          });\n        };\n      }, []);\n      var contextBag = useMemo(function () {\n        return {\n          register: register,\n          slot: props.slot,\n          name: props.name,\n          props: props.props\n        };\n      }, [register, props.slot, props.name, props.props]);\n      return React.createElement(LabelContext.Provider, {\n        value: contextBag\n      }, props.children);\n    };\n  }, [setLabelIds])];\n} // ---\n\n\nvar DEFAULT_LABEL_TAG = 'label';\n\nfunction Label(props) {\n  var _props$passive = props.passive,\n      passive = _props$passive === void 0 ? false : _props$passive,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"passive\"]);\n\n  var context = useLabelContext();\n  var id = \"headlessui-label-\" + useId();\n  useIsoMorphicEffect(function () {\n    return context.register(id);\n  }, [id, context.register]);\n\n  var propsWeControl = _extends({}, context.props, {\n    id: id\n  });\n\n  var allProps = _extends({}, passThroughProps, propsWeControl); // @ts-expect-error props are dynamic via context, some components will\n  //                  provide an onClick then we can delete it.\n\n\n  if (passive) delete allProps['onClick'];\n  return render({\n    props: allProps,\n    slot: context.slot || {},\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: context.name || 'Label'\n  });\n}\n\nexport { Label, useLabels };","map":{"version":3,"sources":["../../../src/components/label/label.tsx"],"names":["LabelContext","createContext","context","useContext","err","Error","useLabels","labelIds","setLabelIds","useState","useMemo","register","useCallback","clone","existing","idx","contextBag","slot","props","name","value","DEFAULT_LABEL_TAG","Label","passive","passThroughProps","useLabelContext","id","useId","useIsoMorphicEffect","propsWeControl","allProps","render","defaultTag"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet LabelContext = createContext<({ register(value: string): () => void } & SharedData) | null>(\n  null\n)\n\nfunction useLabelContext() {\n  let context = useContext(LabelContext)\n  if (context === null) {\n    let err = new Error('You used a <Label /> component, but it is not inside a relevant parent.')\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useLabelContext)\n    throw err\n  }\n  return context\n}\n\ninterface LabelProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useLabels(): [string | undefined, (props: LabelProviderProps) => JSX.Element] {\n  let [labelIds, setLabelIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined.\n    labelIds.length > 0 ? labelIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function LabelProvider(props: LabelProviderProps) {\n        let register = useCallback((value: string) => {\n          setLabelIds(existing => [...existing, value])\n\n          return () =>\n            setLabelIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return <LabelContext.Provider value={contextBag}>{props.children}</LabelContext.Provider>\n      }\n    }, [setLabelIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {}\ntype LabelPropsWeControl = 'id'\n\nexport function Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl> & {\n    passive?: boolean\n  }\n) {\n  let { passive = false, ...passThroughProps } = props\n  let context = useLabelContext()\n  let id = `headlessui-label-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let propsWeControl = { ...context.props, id }\n\n  let allProps = { ...passThroughProps, ...propsWeControl }\n  // @ts-expect-error props are dynamic via context, some components will\n  //                  provide an onClick then we can delete it.\n  if (passive) delete allProps['onClick']\n\n  return render({\n    props: allProps,\n    slot: context.slot || {},\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: context.name || 'Label',\n  })\n}\n"]},"metadata":{},"sourceType":"module"}