{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect.esm.js';\n\nfunction useTreeWalker(_ref) {\n  var container = _ref.container,\n      accept = _ref.accept,\n      walk = _ref.walk,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled;\n  var acceptRef = useRef(accept);\n  var walkRef = useRef(walk);\n  useEffect(function () {\n    acceptRef.current = accept;\n    walkRef.current = walk;\n  }, [accept, walk]);\n  useIsoMorphicEffect(function () {\n    if (!container) return;\n    if (!enabled) return;\n    var accept = acceptRef.current;\n    var walk = walkRef.current;\n    var acceptNode = Object.assign(function (node) {\n      return accept(node);\n    }, {\n      acceptNode: accept\n    });\n    var walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false);\n\n    while (walker.nextNode()) {\n      walk(walker.currentNode);\n    }\n  }, [container, enabled, acceptRef, walkRef]);\n}\n\nexport { useTreeWalker };","map":{"version":3,"sources":["../../src/hooks/use-tree-walker.ts"],"names":["useTreeWalker","container","accept","walk","enabled","acceptRef","useRef","walkRef","useEffect","useIsoMorphicEffect","acceptNode","walker","document","NodeFilter"],"mappings":";;;SAUgBA,a,CAAAA,I,EAAAA;MACdC,SAAAA,GAAAA,IAAAA,CAAAA,S;MACAC,MAAAA,GAAAA,IAAAA,CAAAA,M;MACAC,IAAAA,GAAAA,IAAAA,CAAAA,I;0BACAC,O;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,IAAVA,GAAU,Y;EAOV,IAAIC,SAAS,GAAGC,MAAM,CAAtB,MAAsB,CAAtB;EACA,IAAIC,OAAO,GAAGD,MAAM,CAApB,IAAoB,CAApB;EAEAE,SAAS,CAAC,YAAA;IACRH,SAAS,CAATA,OAAAA,GAAAA,MAAAA;IACAE,OAAO,CAAPA,OAAAA,GAAAA,IAAAA;EAFO,CAAA,EAGN,CAAA,MAAA,EAHHC,IAGG,CAHM,CAATA;EAKAC,mBAAmB,CAAC,YAAA;IAClB,IAAI,CAAJ,SAAA,EAAgB;IAChB,IAAI,CAAJ,OAAA,EAAc;IAEd,IAAIP,MAAM,GAAGG,SAAS,CAAtB,OAAA;IACA,IAAIF,IAAI,GAAGI,OAAO,CAAlB,OAAA;IAEA,IAAIG,UAAU,GAAG,MAAM,CAAN,MAAA,CAAc,UAAA,IAAA,EAAA;MAAA,OAAuBR,MAAM,CAA7B,IAA6B,CAA7B;IAAd,CAAA,EAAmD;MAAEQ,UAAU,EAAER;IAAd,CAAnD,CAAjB;IACA,IAAIS,MAAM,GAAGC,QAAQ,CAARA,gBAAAA,CAAAA,SAAAA,EAAqCC,UAAU,CAA/CD,YAAAA,EAAAA,UAAAA,EAAb,KAAaA,CAAb;;IAEA,OAAOD,MAAM,CAAb,QAAOA,EAAP,EAAA;MAA0BR,IAAI,CAACQ,MAAM,CAAXR,WAAI,CAAJA;IAA1B;EAViB,CAAA,EAWhB,CAAA,SAAA,EAAA,OAAA,EAAA,SAAA,EAXHM,OAWG,CAXgB,CAAnBA;AAYD","sourcesContent":["import { useRef, useEffect } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\ntype AcceptNode = (\n  node: HTMLElement\n) =>\n  | typeof NodeFilter.FILTER_ACCEPT\n  | typeof NodeFilter.FILTER_SKIP\n  | typeof NodeFilter.FILTER_REJECT\n\nexport function useTreeWalker({\n  container,\n  accept,\n  walk,\n  enabled = true,\n}: {\n  container: HTMLElement | null\n  accept: AcceptNode\n  walk(node: HTMLElement): void\n  enabled?: boolean\n}) {\n  let acceptRef = useRef(accept)\n  let walkRef = useRef(walk)\n\n  useEffect(() => {\n    acceptRef.current = accept\n    walkRef.current = walk\n  }, [accept, walk])\n\n  useIsoMorphicEffect(() => {\n    if (!container) return\n    if (!enabled) return\n\n    let accept = acceptRef.current\n    let walk = walkRef.current\n\n    let acceptNode = Object.assign((node: HTMLElement) => accept(node), { acceptNode: accept })\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false)\n\n    while (walker.nextNode()) walk(walker.currentNode as HTMLElement)\n  }, [container, enabled, acceptRef, walkRef])\n}\n"]},"metadata":{},"sourceType":"module"}