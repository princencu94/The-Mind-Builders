{"ast":null,"code":"import { createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useCallback, useRef, useEffect } from 'react';\n\nfunction useSyncRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  var cache = useRef(refs);\n  useEffect(function () {\n    cache.current = refs;\n  }, [refs]);\n  return useCallback(function (value) {\n    for (var _iterator = _createForOfIteratorHelperLoose(cache.current), _step; !(_step = _iterator()).done;) {\n      var ref = _step.value;\n      if (ref == null) continue;\n      if (typeof ref === 'function') ref(value);else ref.current = value;\n    }\n  }, [cache]);\n}\n\nexport { useSyncRefs };","map":{"version":3,"sources":["../../src/hooks/use-sync-refs.ts"],"names":["useSyncRefs","refs","cache","useRef","useEffect","useCallback","ref"],"mappings":";;;SAEgBA,W,GAAAA;oCACXC,IAAAA,GAAAA,IAAAA,KAAAA,CAAAA,IAAAA,C,EAAAA,IAAAA,GAAAA,C,EAAAA,IAAAA,GAAAA,I,EAAAA,IAAAA,E,EAAAA;IAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,IAAAA,CAAAA;;;EAEH,IAAIC,KAAK,GAAGC,MAAM,CAAlB,IAAkB,CAAlB;EAEAC,SAAS,CAAC,YAAA;IACRF,KAAK,CAALA,OAAAA,GAAAA,IAAAA;EADO,CAAA,EAEN,CAFHE,IAEG,CAFM,CAATA;EAIA,OAAOC,WAAW,CAChB,UAAA,KAAA,EAAA;IACE,KAAA,IAAA,SAAA,GAAA,+BAAA,CAAgBH,KAAK,CAArB,OAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,GAA+B;MAAA,IAAtBI,GAAsB,GAAA,KAAA,CAAA,KAAA;MAC7B,IAAIA,GAAG,IAAP,IAAA,EAAiB;MACjB,IAAI,OAAA,GAAA,KAAJ,UAAA,EAA+BA,GAAG,CAAlC,KAAkC,CAAHA,CAA/B,KACKA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;IACN;EANa,CAAA,EAQhB,CARF,KAQE,CARgB,CAAlB;AAUD","sourcesContent":["import { useRef, useEffect, useCallback } from 'react'\n\nexport function useSyncRefs<TType>(\n  ...refs: (React.MutableRefObject<TType | null> | ((instance: TType) => void) | null)[]\n) {\n  let cache = useRef(refs)\n\n  useEffect(() => {\n    cache.current = refs\n  }, [refs])\n\n  return useCallback(\n    (value: TType) => {\n      for (let ref of cache.current) {\n        if (ref == null) continue\n        if (typeof ref === 'function') ref(value)\n        else ref.current = value\n      }\n    },\n    [cache]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}