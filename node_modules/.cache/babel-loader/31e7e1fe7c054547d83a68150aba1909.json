{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useState, useContext, useEffect, createContext, Fragment } from 'react';\nimport { render } from '../../utils/render.esm.js';\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect.esm.js';\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete.esm.js';\nimport { createPortal } from 'react-dom';\nimport { usePortalRoot } from '../../internal/portal-force-root.esm.js';\n\nfunction usePortalTarget() {\n  var forceInRoot = usePortalRoot();\n  var groupTarget = useContext(PortalGroupContext);\n\n  var _useState = useState(function () {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null; // No group context is used, let's create a default portal root\n\n    if (typeof window === 'undefined') return null;\n    var existingRoot = document.getElementById('headlessui-portal-root');\n    if (existingRoot) return existingRoot;\n    var root = document.createElement('div');\n    root.setAttribute('id', 'headlessui-portal-root');\n    return document.body.appendChild(root);\n  }),\n      target = _useState[0],\n      setTarget = _useState[1];\n\n  useEffect(function () {\n    if (forceInRoot) return;\n    if (groupTarget === null) return;\n    setTarget(groupTarget.current);\n  }, [groupTarget, setTarget, forceInRoot]);\n  return target;\n} // ---\n\n\nvar DEFAULT_PORTAL_TAG = Fragment;\n\nfunction Portal(props) {\n  var passthroughProps = props;\n  var target = usePortalTarget();\n\n  var _useState2 = useState(function () {\n    return typeof window === 'undefined' ? null : document.createElement('div');\n  }),\n      element = _useState2[0];\n\n  var ready = useServerHandoffComplete();\n  useIsoMorphicEffect(function () {\n    if (!target) return;\n    if (!element) return;\n    target.appendChild(element);\n    return function () {\n      if (!target) return;\n      if (!element) return;\n      target.removeChild(element);\n\n      if (target.childNodes.length <= 0) {\n        var _target$parentElement;\n\n        (_target$parentElement = target.parentElement) == null ? void 0 : _target$parentElement.removeChild(target);\n      }\n    };\n  }, [target, element]);\n  if (!ready) return null;\n  return !target || !element ? null : createPortal(render({\n    props: passthroughProps,\n    defaultTag: DEFAULT_PORTAL_TAG,\n    name: 'Portal'\n  }), element);\n} // ---\n\n\nvar DEFAULT_GROUP_TAG = Fragment;\nvar PortalGroupContext = /*#__PURE__*/createContext(null);\n\nfunction Group(props) {\n  var target = props.target,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"target\"]);\n\n  return React.createElement(PortalGroupContext.Provider, {\n    value: target\n  }, render({\n    props: passthroughProps,\n    defaultTag: DEFAULT_GROUP_TAG,\n    name: 'Popover.Group'\n  }));\n} // ---\n\n\nPortal.Group = Group;\nexport { Portal };","map":{"version":3,"sources":["../../../src/components/portal/portal.tsx"],"names":["forceInRoot","usePortalRoot","groupTarget","useContext","target","setTarget","useState","existingRoot","document","root","useEffect","DEFAULT_PORTAL_TAG","Portal","props","passthroughProps","usePortalTarget","element","ready","useServerHandoffComplete","useIsoMorphicEffect","createPortal","render","defaultTag","name","DEFAULT_GROUP_TAG","PortalGroupContext","createContext","value"],"mappings":"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","sourcesContent":["import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { usePortalRoot } from '../../internal/portal-force-root'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  let ready = useServerHandoffComplete()\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n\n      if (target.childNodes.length <= 0) {\n        target.parentElement?.removeChild(target)\n      }\n    }\n  }, [target, element])\n\n  if (!ready) return null\n\n  return !target || !element\n    ? null\n    : createPortal(\n        render({ props: passthroughProps, defaultTag: DEFAULT_PORTAL_TAG, name: 'Portal' }),\n        element\n      )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render({\n        props: passthroughProps,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n"]},"metadata":{},"sourceType":"module"}