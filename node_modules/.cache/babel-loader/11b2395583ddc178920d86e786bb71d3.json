{"ast":null,"code":"function assertNever(x) {\n  throw new Error('Unexpected object: ' + x);\n}\n\nvar Focus;\n\n(function (Focus) {\n  /** Focus the first non-disabled item. */\n  Focus[Focus[\"First\"] = 0] = \"First\";\n  /** Focus the previous non-disabled item. */\n\n  Focus[Focus[\"Previous\"] = 1] = \"Previous\";\n  /** Focus the next non-disabled item. */\n\n  Focus[Focus[\"Next\"] = 2] = \"Next\";\n  /** Focus the last non-disabled item. */\n\n  Focus[Focus[\"Last\"] = 3] = \"Last\";\n  /** Focus a specific item based on the `id` of the item. */\n\n  Focus[Focus[\"Specific\"] = 4] = \"Specific\";\n  /** Focus no items at all. */\n\n  Focus[Focus[\"Nothing\"] = 5] = \"Nothing\";\n})(Focus || (Focus = {}));\n\nfunction calculateActiveIndex(action, resolvers) {\n  var items = resolvers.resolveItems();\n  if (items.length <= 0) return null;\n  var currentActiveIndex = resolvers.resolveActiveIndex();\n  var activeIndex = currentActiveIndex != null ? currentActiveIndex : -1;\n\n  var nextActiveIndex = function () {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(function (item) {\n          return !resolvers.resolveDisabled(item);\n        });\n\n      case Focus.Previous:\n        {\n          var idx = items.slice().reverse().findIndex(function (item, idx, all) {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false;\n            return !resolvers.resolveDisabled(item);\n          });\n          if (idx === -1) return idx;\n          return items.length - 1 - idx;\n        }\n\n      case Focus.Next:\n        return items.findIndex(function (item, idx) {\n          if (idx <= activeIndex) return false;\n          return !resolvers.resolveDisabled(item);\n        });\n\n      case Focus.Last:\n        {\n          var _idx = items.slice().reverse().findIndex(function (item) {\n            return !resolvers.resolveDisabled(item);\n          });\n\n          if (_idx === -1) return _idx;\n          return items.length - 1 - _idx;\n        }\n\n      case Focus.Specific:\n        return items.findIndex(function (item) {\n          return resolvers.resolveId(item) === action.id;\n        });\n\n      case Focus.Nothing:\n        return null;\n\n      default:\n        assertNever(action);\n    }\n  }();\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex;\n}\n\nexport { Focus, calculateActiveIndex };","map":{"version":3,"sources":["../../src/utils/calculate-active-index.ts"],"names":["Focus","calculateActiveIndex","action","resolvers","items","currentActiveIndex","activeIndex","nextActiveIndex","idx","all","assertNever"],"mappings":"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","sourcesContent":["function assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x)\n}\n\nexport enum Focus {\n  /** Focus the first non-disabled item. */\n  First,\n\n  /** Focus the previous non-disabled item. */\n  Previous,\n\n  /** Focus the next non-disabled item. */\n  Next,\n\n  /** Focus the last non-disabled item. */\n  Last,\n\n  /** Focus a specific item based on the `id` of the item. */\n  Specific,\n\n  /** Focus no items at all. */\n  Nothing,\n}\n\nexport function calculateActiveIndex<TItem>(\n  action: { focus: Focus.Specific; id: string } | { focus: Exclude<Focus, Focus.Specific> },\n  resolvers: {\n    resolveItems(): TItem[]\n    resolveActiveIndex(): number | null\n    resolveId(item: TItem): string\n    resolveDisabled(item: TItem): boolean\n  }\n) {\n  let items = resolvers.resolveItems()\n  if (items.length <= 0) return null\n\n  let currentActiveIndex = resolvers.resolveActiveIndex()\n  let activeIndex = currentActiveIndex ?? -1\n\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(item => !resolvers.resolveDisabled(item))\n\n      case Focus.Previous: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex((item, idx, all) => {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false\n            return !resolvers.resolveDisabled(item)\n          })\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Next:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex) return false\n          return !resolvers.resolveDisabled(item)\n        })\n\n      case Focus.Last: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex(item => !resolvers.resolveDisabled(item))\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Specific:\n        return items.findIndex(item => resolvers.resolveId(item) === action.id)\n\n      case Focus.Nothing:\n        return null\n\n      default:\n        assertNever(action)\n    }\n  })()\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex\n}\n"]},"metadata":{},"sourceType":"module"}