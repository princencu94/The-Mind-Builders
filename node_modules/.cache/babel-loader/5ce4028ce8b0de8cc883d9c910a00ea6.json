{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useEffect, useMemo, useContext, useCallback, createContext, useRef, useState } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, forwardRefWithAs, Features } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { isFocusableElement, getFocusableElements, focusIn, Focus, FocusResult, FocusableMode } from '../../utils/focus-management.esm.js';\nimport { useWindowEvent } from '../../hooks/use-window-event.esm.js';\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';\n\nvar _reducers;\n\nvar PopoverStates;\n\n(function (PopoverStates) {\n  PopoverStates[PopoverStates[\"Open\"] = 0] = \"Open\";\n  PopoverStates[PopoverStates[\"Closed\"] = 1] = \"Closed\";\n})(PopoverStates || (PopoverStates = {}));\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"TogglePopover\"] = 0] = \"TogglePopover\";\n  ActionTypes[ActionTypes[\"ClosePopover\"] = 1] = \"ClosePopover\";\n  ActionTypes[ActionTypes[\"SetButton\"] = 2] = \"SetButton\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 3] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanel\"] = 4] = \"SetPanel\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 5] = \"SetPanelId\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.TogglePopover] = function (state) {\n  var _match;\n\n  return _extends({}, state, {\n    popoverState: match(state.popoverState, (_match = {}, _match[PopoverStates.Open] = PopoverStates.Closed, _match[PopoverStates.Closed] = PopoverStates.Open, _match))\n  });\n}, _reducers[ActionTypes.ClosePopover] = function (state) {\n  if (state.popoverState === PopoverStates.Closed) return state;\n  return _extends({}, state, {\n    popoverState: PopoverStates.Closed\n  });\n}, _reducers[ActionTypes.SetButton] = function (state, action) {\n  if (state.button === action.button) return state;\n  return _extends({}, state, {\n    button: action.button\n  });\n}, _reducers[ActionTypes.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers[ActionTypes.SetPanel] = function (state, action) {\n  if (state.panel === action.panel) return state;\n  return _extends({}, state, {\n    panel: action.panel\n  });\n}, _reducers[ActionTypes.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers);\nvar PopoverContext = /*#__PURE__*/createContext(null);\nPopoverContext.displayName = 'PopoverContext';\n\nfunction usePopoverContext(component) {\n  var context = useContext(PopoverContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Popover.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext);\n    throw err;\n  }\n\n  return context;\n}\n\nvar PopoverAPIContext = /*#__PURE__*/createContext(null);\nPopoverAPIContext.displayName = 'PopoverAPIContext';\n\nfunction usePopoverAPIContext(component) {\n  var context = useContext(PopoverAPIContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Popover.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext);\n    throw err;\n  }\n\n  return context;\n}\n\nvar PopoverGroupContext = /*#__PURE__*/createContext(null);\nPopoverGroupContext.displayName = 'PopoverGroupContext';\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext);\n}\n\nvar PopoverPanelContext = /*#__PURE__*/createContext(null);\nPopoverPanelContext.displayName = 'PopoverPanelContext';\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext);\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_POPOVER_TAG = 'div';\n\nfunction Popover(props) {\n  var _match2;\n\n  var buttonId = \"headlessui-popover-button-\" + useId();\n  var panelId = \"headlessui-popover-panel-\" + useId();\n  var reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId: buttonId,\n    panel: null,\n    panelId: panelId\n  });\n  var _reducerBag$ = reducerBag[0],\n      popoverState = _reducerBag$.popoverState,\n      button = _reducerBag$.button,\n      panel = _reducerBag$.panel,\n      dispatch = reducerBag[1];\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var registerBag = useMemo(function () {\n    return {\n      buttonId: buttonId,\n      panelId: panelId,\n      close: function close() {\n        return dispatch({\n          type: ActionTypes.ClosePopover\n        });\n      }\n    };\n  }, [buttonId, panelId, dispatch]);\n  var groupContext = usePopoverGroupContext();\n  var registerPopover = groupContext == null ? void 0 : groupContext.registerPopover;\n  var isFocusWithinPopoverGroup = useCallback(function () {\n    var _groupContext$isFocus;\n\n    return (_groupContext$isFocus = groupContext == null ? void 0 : groupContext.isFocusWithinPopoverGroup()) != null ? _groupContext$isFocus : (button == null ? void 0 : button.contains(document.activeElement)) || (panel == null ? void 0 : panel.contains(document.activeElement));\n  }, [groupContext, button, panel]);\n  useEffect(function () {\n    return registerPopover == null ? void 0 : registerPopover(registerBag);\n  }, [registerPopover, registerBag]); // Handle focus out\n\n  useWindowEvent('focus', function () {\n    if (popoverState !== PopoverStates.Open) return;\n    if (isFocusWithinPopoverGroup()) return;\n    if (!button) return;\n    if (!panel) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, true); // Handle outside click\n\n  useWindowEvent('mousedown', function (event) {\n    var target = event.target;\n    if (popoverState !== PopoverStates.Open) return;\n    if (button == null ? void 0 : button.contains(target)) return;\n    if (panel == null ? void 0 : panel.contains(target)) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault();\n      button == null ? void 0 : button.focus();\n    }\n  });\n  var close = useCallback(function (focusableElement) {\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n\n    var restoreElement = function () {\n      if (!focusableElement) return button;\n      if (focusableElement instanceof HTMLElement) return focusableElement;\n      if (focusableElement.current instanceof HTMLElement) return focusableElement.current;\n      return button;\n    }();\n\n    restoreElement == null ? void 0 : restoreElement.focus();\n  }, [dispatch, button]);\n  var api = useMemo(function () {\n    return {\n      close: close\n    };\n  }, [close]);\n  var slot = useMemo(function () {\n    return {\n      open: popoverState === PopoverStates.Open,\n      close: close\n    };\n  }, [popoverState, close]);\n  return React.createElement(PopoverContext.Provider, {\n    value: reducerBag\n  }, React.createElement(PopoverAPIContext.Provider, {\n    value: api\n  }, React.createElement(OpenClosedProvider, {\n    value: match(popoverState, (_match2 = {}, _match2[PopoverStates.Open] = State.Open, _match2[PopoverStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: props,\n    slot: slot,\n    defaultTag: DEFAULT_POPOVER_TAG,\n    name: 'Popover'\n  }))));\n} // ---\n\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _usePopoverContext = usePopoverContext([Popover.name, Button.name].join('.')),\n      state = _usePopoverContext[0],\n      dispatch = _usePopoverContext[1];\n\n  var internalButtonRef = useRef(null);\n  var groupContext = usePopoverGroupContext();\n  var closeOthers = groupContext == null ? void 0 : groupContext.closeOthers;\n  var panelContext = usePopoverPanelContext();\n  var isWithinPanel = panelContext === null ? false : panelContext === state.panelId;\n  var buttonRef = useSyncRefs(internalButtonRef, ref, isWithinPanel ? null : function (button) {\n    return dispatch({\n      type: ActionTypes.SetButton,\n      button: button\n    });\n  });\n  var withinPanelButtonRef = useSyncRefs(internalButtonRef, ref); // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n  var activeElementRef = useRef(null);\n  var previousActiveElementRef = useRef(typeof window === 'undefined' ? null : document.activeElement);\n  useWindowEvent('focus', function () {\n    previousActiveElementRef.current = activeElementRef.current;\n    activeElementRef.current = document.activeElement;\n  }, true);\n  var handleKeyDown = useCallback(function (event) {\n    var _state$button;\n\n    if (isWithinPanel) {\n      if (state.popoverState === PopoverStates.Closed) return;\n\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ClosePopover\n          });\n          (_state$button = state.button) == null ? void 0 : _state$button.focus(); // Re-focus the original opening Button\n\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          dispatch({\n            type: ActionTypes.TogglePopover\n          });\n          break;\n\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          if (!internalButtonRef.current) return;\n          if (!internalButtonRef.current.contains(document.activeElement)) return;\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ClosePopover\n          });\n          break;\n\n        case Keys.Tab:\n          if (state.popoverState !== PopoverStates.Open) return;\n          if (!state.panel) return;\n          if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n          if (event.shiftKey) {\n            var _state$button2; // Check if the last focused element exists, and check that it is not inside button or panel itself\n\n\n            if (!previousActiveElementRef.current) return;\n            if ((_state$button2 = state.button) == null ? void 0 : _state$button2.contains(previousActiveElementRef.current)) return;\n            if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n            var focusableElements = getFocusableElements();\n            var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n            var buttonIdx = focusableElements.indexOf(state.button);\n            if (buttonIdx > previousIdx) return;\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.Last);\n          } else {\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.First);\n          }\n\n          break;\n      }\n    }\n  }, [dispatch, state.popoverState, state.buttonId, state.button, state.panel, internalButtonRef, closeOthers, isWithinPanel]);\n  var handleKeyUp = useCallback(function (event) {\n    var _state$button3;\n\n    if (isWithinPanel) return;\n\n    if (event.key === Keys.Space) {\n      // Required for firefox, event.preventDefault() in handleKeyDown for\n      // the Space key doesn't cancel the handleKeyUp, which in turn\n      // triggers a *click*.\n      event.preventDefault();\n    }\n\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!state.panel) return;\n    if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n    switch (event.key) {\n      case Keys.Tab:\n        // Check if the last focused element exists, and check that it is not inside button or panel itself\n        if (!previousActiveElementRef.current) return;\n        if ((_state$button3 = state.button) == null ? void 0 : _state$button3.contains(previousActiveElementRef.current)) return;\n        if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n        var focusableElements = getFocusableElements();\n        var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n        var buttonIdx = focusableElements.indexOf(state.button);\n        if (buttonIdx > previousIdx) return;\n        event.preventDefault();\n        event.stopPropagation();\n        focusIn(state.panel, Focus.Last);\n        break;\n    }\n  }, [state.popoverState, state.panel, state.button, isWithinPanel]);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n\n    if (isWithinPanel) {\n      var _state$button4;\n\n      dispatch({\n        type: ActionTypes.ClosePopover\n      });\n      (_state$button4 = state.button) == null ? void 0 : _state$button4.focus(); // Re-focus the original opening Button\n    } else {\n      var _state$button5;\n\n      if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n      (_state$button5 = state.button) == null ? void 0 : _state$button5.focus();\n      dispatch({\n        type: ActionTypes.TogglePopover\n      });\n    }\n  }, [dispatch, state.button, state.popoverState, state.buttonId, props.disabled, closeOthers, isWithinPanel]);\n  var slot = useMemo(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open\n    };\n  }, [state]);\n  var type = useResolveButtonType(props, internalButtonRef);\n  var passthroughProps = props;\n  var propsWeControl = isWithinPanel ? {\n    ref: withinPanelButtonRef,\n    type: type,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  } : {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: type,\n    'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n    'aria-controls': state.panel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button'\n  });\n}); // ---\n\nvar DEFAULT_OVERLAY_TAG = 'div';\nvar OverlayRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Overlay = /*#__PURE__*/forwardRefWithAs(function Overlay(props, ref) {\n  var _usePopoverContext2 = usePopoverContext([Popover.name, Overlay.name].join('.')),\n      popoverState = _usePopoverContext2[0].popoverState,\n      dispatch = _usePopoverContext2[1];\n\n  var overlayRef = useSyncRefs(ref);\n  var id = \"headlessui-popover-overlay-\" + useId();\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return popoverState === PopoverStates.Open;\n  }();\n\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, [dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: popoverState === PopoverStates.Open\n    };\n  }, [popoverState]);\n  var propsWeControl = {\n    ref: overlayRef,\n    id: id,\n    'aria-hidden': true,\n    onClick: handleClick\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible: visible,\n    name: 'Popover.Overlay'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _props$focus = props.focus,\n      focus = _props$focus === void 0 ? false : _props$focus,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"focus\"]);\n\n  var _usePopoverContext3 = usePopoverContext([Popover.name, Panel.name].join('.')),\n      state = _usePopoverContext3[0],\n      dispatch = _usePopoverContext3[1];\n\n  var _usePopoverAPIContext = usePopoverAPIContext([Popover.name, Panel.name].join('.')),\n      close = _usePopoverAPIContext.close;\n\n  var internalPanelRef = useRef(null);\n  var panelRef = useSyncRefs(internalPanelRef, ref, function (panel) {\n    dispatch({\n      type: ActionTypes.SetPanel,\n      panel: panel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.popoverState === PopoverStates.Open;\n  }();\n\n  var handleKeyDown = useCallback(function (event) {\n    var _state$button6;\n\n    switch (event.key) {\n      case Keys.Escape:\n        if (state.popoverState !== PopoverStates.Open) return;\n        if (!internalPanelRef.current) return;\n        if (!internalPanelRef.current.contains(document.activeElement)) return;\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes.ClosePopover\n        });\n        (_state$button6 = state.button) == null ? void 0 : _state$button6.focus();\n        break;\n    }\n  }, [state, internalPanelRef, dispatch]); // Unlink on \"unmount\" myself\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes.SetPanel,\n        panel: null\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  useEffect(function () {\n    var _props$unmount;\n\n    if (props[\"static\"]) return;\n\n    if (state.popoverState === PopoverStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes.SetPanel,\n        panel: null\n      });\n    }\n  }, [state.popoverState, props.unmount, props[\"static\"], dispatch]); // Move focus within panel\n\n  useEffect(function () {\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    var activeElement = document.activeElement;\n    if (internalPanelRef.current.contains(activeElement)) return; // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First);\n  }, [focus, internalPanelRef, state.popoverState]); // Handle Tab / Shift+Tab focus positioning\n\n  useWindowEvent('keydown', function (event) {\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if (event.key !== Keys.Tab) return;\n    if (!document.activeElement) return;\n    if (!internalPanelRef.current) return;\n    if (!internalPanelRef.current.contains(document.activeElement)) return; // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n\n    event.preventDefault();\n    var result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next);\n\n    if (result === FocusResult.Underflow) {\n      var _state$button7;\n\n      return (_state$button7 = state.button) == null ? void 0 : _state$button7.focus();\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return;\n      var elements = getFocusableElements();\n      var buttonIdx = elements.indexOf(state.button);\n      var nextElements = elements.splice(buttonIdx + 1) // Elements after button\n      .filter(function (element) {\n        var _internalPanelRef$cur;\n\n        return !((_internalPanelRef$cur = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur.contains(element));\n      }); // Ignore items in panel\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First);\n      }\n    }\n  }); // Handle focus out when we are in special \"focus\" mode\n\n  useWindowEvent('focus', function () {\n    var _internalPanelRef$cur2;\n\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if ((_internalPanelRef$cur2 = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur2.contains(document.activeElement)) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, true);\n  var slot = useMemo(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open,\n      close: close\n    };\n  }, [state, close]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown\n  };\n  return React.createElement(PopoverPanelContext.Provider, {\n    value: state.panelId\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Popover.Panel'\n  }));\n}); // ---\n\nvar DEFAULT_GROUP_TAG = 'div';\n\nfunction Group(props) {\n  var groupRef = useRef(null);\n\n  var _useState = useState([]),\n      popovers = _useState[0],\n      setPopovers = _useState[1];\n\n  var unregisterPopover = useCallback(function (registerbag) {\n    setPopovers(function (existing) {\n      var idx = existing.indexOf(registerbag);\n\n      if (idx !== -1) {\n        var clone = existing.slice();\n        clone.splice(idx, 1);\n        return clone;\n      }\n\n      return existing;\n    });\n  }, [setPopovers]);\n  var registerPopover = useCallback(function (registerbag) {\n    setPopovers(function (existing) {\n      return [].concat(existing, [registerbag]);\n    });\n    return function () {\n      return unregisterPopover(registerbag);\n    };\n  }, [setPopovers, unregisterPopover]);\n  var isFocusWithinPopoverGroup = useCallback(function () {\n    var _groupRef$current;\n\n    var element = document.activeElement;\n    if ((_groupRef$current = groupRef.current) == null ? void 0 : _groupRef$current.contains(element)) return true; // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n\n    return popovers.some(function (bag) {\n      var _document$getElementB, _document$getElementB2;\n\n      return ((_document$getElementB = document.getElementById(bag.buttonId)) == null ? void 0 : _document$getElementB.contains(element)) || ((_document$getElementB2 = document.getElementById(bag.panelId)) == null ? void 0 : _document$getElementB2.contains(element));\n    });\n  }, [groupRef, popovers]);\n  var closeOthers = useCallback(function (buttonId) {\n    for (var _iterator = _createForOfIteratorHelperLoose(popovers), _step; !(_step = _iterator()).done;) {\n      var popover = _step.value;\n      if (popover.buttonId !== buttonId) popover.close();\n    }\n  }, [popovers]);\n  var contextBag = useMemo(function () {\n    return {\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup: isFocusWithinPopoverGroup,\n      closeOthers: closeOthers\n    };\n  }, [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]);\n  var slot = useMemo(function () {\n    return {};\n  }, []);\n  var propsWeControl = {\n    ref: groupRef\n  };\n  var passthroughProps = props;\n  return React.createElement(PopoverGroupContext.Provider, {\n    value: contextBag\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_GROUP_TAG,\n    name: 'Popover.Group'\n  }));\n} // ---\n\n\nPopover.Button = Button;\nPopover.Overlay = Overlay;\nPopover.Panel = Panel;\nPopover.Group = Group;\nexport { Popover };","map":{"version":3,"sources":["../../../src/components/popover/popover.tsx"],"names":["PopoverStates","ActionTypes","reducers","popoverState","match","state","Closed","action","button","buttonId","panel","panelId","PopoverContext","createContext","context","useContext","err","Popover","Error","PopoverAPIContext","PopoverGroupContext","PopoverPanelContext","DEFAULT_POPOVER_TAG","props","useId","reducerBag","useReducer","dispatch","useEffect","type","registerBag","useMemo","close","ClosePopover","groupContext","usePopoverGroupContext","registerPopover","isFocusWithinPopoverGroup","useCallback","document","useWindowEvent","target","event","isFocusableElement","FocusableMode","restoreElement","focusableElement","api","slot","open","value","State","render","defaultTag","name","DEFAULT_BUTTON_TAG","Button","forwardRefWithAs","usePopoverContext","internalButtonRef","useRef","closeOthers","panelContext","usePopoverPanelContext","isWithinPanel","buttonRef","useSyncRefs","withinPanelButtonRef","activeElementRef","previousActiveElementRef","handleKeyDown","Keys","TogglePopover","focusableElements","getFocusableElements","previousIdx","buttonIdx","focusIn","Focus","handleKeyUp","handleClick","isDisabledReactIssue7711","Open","useResolveButtonType","passthroughProps","propsWeControl","ref","onKeyDown","onClick","id","onKeyUp","DEFAULT_OVERLAY_TAG","OverlayRenderFeatures","Features","Overlay","overlayRef","usesOpenClosedState","useOpenClosed","visible","features","DEFAULT_PANEL_TAG","PanelRenderFeatures","Panel","focus","usePopoverAPIContext","internalPanelRef","panelRef","activeElement","result","FocusResult","elements","nextElements","DEFAULT_GROUP_TAG","groupRef","popovers","setPopovers","useState","unregisterPopover","idx","existing","clone","element","bag","popover","contextBag"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport {\n  getFocusableElements,\n  Focus,\n  focusIn,\n  FocusResult,\n  isFocusableElement,\n  FocusableMode,\n} from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum PopoverStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  popoverState: PopoverStates\n\n  button: HTMLElement | null\n  buttonId: string\n  panel: HTMLElement | null\n  panelId: string\n}\n\nenum ActionTypes {\n  TogglePopover,\n  ClosePopover,\n\n  SetButton,\n  SetButtonId,\n  SetPanel,\n  SetPanelId,\n}\n\ntype Actions =\n  | { type: ActionTypes.TogglePopover }\n  | { type: ActionTypes.ClosePopover }\n  | { type: ActionTypes.SetButton; button: HTMLElement | null }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanel; panel: HTMLElement | null }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.TogglePopover]: state => ({\n    ...state,\n    popoverState: match(state.popoverState, {\n      [PopoverStates.Open]: PopoverStates.Closed,\n      [PopoverStates.Closed]: PopoverStates.Open,\n    }),\n  }),\n  [ActionTypes.ClosePopover](state) {\n    if (state.popoverState === PopoverStates.Closed) return state\n    return { ...state, popoverState: PopoverStates.Closed }\n  },\n  [ActionTypes.SetButton](state, action) {\n    if (state.button === action.button) return state\n    return { ...state, button: action.button }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanel](state, action) {\n    if (state.panel === action.panel) return state\n    return { ...state, panel: action.panel }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet PopoverContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nPopoverContext.displayName = 'PopoverContext'\n\nfunction usePopoverContext(component: string) {\n  let context = useContext(PopoverContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nPopoverAPIContext.displayName = 'PopoverAPIContext'\n\nfunction usePopoverAPIContext(component: string) {\n  let context = useContext(PopoverAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverGroupContext = createContext<{\n  registerPopover(registerbag: PopoverRegisterBag): void\n  unregisterPopover(registerbag: PopoverRegisterBag): void\n  isFocusWithinPopoverGroup(): boolean\n  closeOthers(buttonId: string): void\n} | null>(null)\nPopoverGroupContext.displayName = 'PopoverGroupContext'\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext)\n}\n\nlet PopoverPanelContext = createContext<string | null>(null)\nPopoverPanelContext.displayName = 'PopoverPanelContext'\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext)\n}\n\ninterface PopoverRegisterBag {\n  buttonId: string\n  panelId: string\n  close(): void\n}\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_POPOVER_TAG = 'div' as const\ninterface PopoverRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Popover<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(\n  props: Props<TTag, PopoverRenderPropArg>\n) {\n  let buttonId = `headlessui-popover-button-${useId()}`\n  let panelId = `headlessui-popover-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n  } as StateDefinition)\n  let [{ popoverState, button, panel }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let registerBag = useMemo(\n    () => ({ buttonId, panelId, close: () => dispatch({ type: ActionTypes.ClosePopover }) }),\n    [buttonId, panelId, dispatch]\n  )\n\n  let groupContext = usePopoverGroupContext()\n  let registerPopover = groupContext?.registerPopover\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    return (\n      groupContext?.isFocusWithinPopoverGroup() ??\n      (button?.contains(document.activeElement) || panel?.contains(document.activeElement))\n    )\n  }, [groupContext, button, panel])\n\n  useEffect(() => registerPopover?.(registerBag), [registerPopover, registerBag])\n\n  // Handle focus out\n  useWindowEvent(\n    'focus',\n    () => {\n      if (popoverState !== PopoverStates.Open) return\n      if (isFocusWithinPopoverGroup()) return\n      if (!button) return\n      if (!panel) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (popoverState !== PopoverStates.Open) return\n\n    if (button?.contains(target)) return\n    if (panel?.contains(target)) return\n\n    dispatch({ type: ActionTypes.ClosePopover })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      button?.focus()\n    }\n  })\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.ClosePopover })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return button\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return button\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, button]\n  )\n\n  let api = useMemo<ContextType<typeof PopoverAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<PopoverRenderPropArg>(\n    () => ({ open: popoverState === PopoverStates.Open, close }),\n    [popoverState, close]\n  )\n\n  return (\n    <PopoverContext.Provider value={reducerBag}>\n      <PopoverAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(popoverState, {\n            [PopoverStates.Open]: State.Open,\n            [PopoverStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props,\n            slot,\n            defaultTag: DEFAULT_POPOVER_TAG,\n            name: 'Popover',\n          })}\n        </OpenClosedProvider>\n      </PopoverAPIContext.Provider>\n    </PopoverContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = usePopoverContext([Popover.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  let groupContext = usePopoverGroupContext()\n  let closeOthers = groupContext?.closeOthers\n\n  let panelContext = usePopoverPanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let buttonRef = useSyncRefs(\n    internalButtonRef,\n    ref,\n    isWithinPanel ? null : button => dispatch({ type: ActionTypes.SetButton, button })\n  )\n  let withinPanelButtonRef = useSyncRefs(internalButtonRef, ref)\n\n  // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n  let activeElementRef = useRef<Element | null>(null)\n  let previousActiveElementRef = useRef<Element | null>(\n    typeof window === 'undefined' ? null : document.activeElement\n  )\n  useWindowEvent(\n    'focus',\n    () => {\n      previousActiveElementRef.current = activeElementRef.current\n      activeElementRef.current = document.activeElement\n    },\n    true\n  )\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.popoverState === PopoverStates.Closed) return\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            state.button?.focus() // Re-focus the original opening Button\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n            dispatch({ type: ActionTypes.TogglePopover })\n            break\n\n          case Keys.Escape:\n            if (state.popoverState !== PopoverStates.Open) return closeOthers?.(state.buttonId)\n            if (!internalButtonRef.current) return\n            if (!internalButtonRef.current.contains(document.activeElement)) return\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            break\n\n          case Keys.Tab:\n            if (state.popoverState !== PopoverStates.Open) return\n            if (!state.panel) return\n            if (!state.button) return\n\n            // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n            if (event.shiftKey) {\n              // Check if the last focused element exists, and check that it is not inside button or panel itself\n              if (!previousActiveElementRef.current) return\n              if (state.button?.contains(previousActiveElementRef.current)) return\n              if (state.panel.contains(previousActiveElementRef.current)) return\n\n              // Check if the last focused element is *after* the button in the DOM\n              let focusableElements = getFocusableElements()\n              let previousIdx = focusableElements.indexOf(\n                previousActiveElementRef.current as HTMLElement\n              )\n              let buttonIdx = focusableElements.indexOf(state.button)\n              if (buttonIdx > previousIdx) return\n\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.Last)\n            } else {\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.First)\n            }\n\n            break\n        }\n      }\n    },\n    [\n      dispatch,\n      state.popoverState,\n      state.buttonId,\n      state.button,\n      state.panel,\n      internalButtonRef,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) return\n      if (event.key === Keys.Space) {\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n      }\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!state.panel) return\n      if (!state.button) return\n\n      // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n      switch (event.key) {\n        case Keys.Tab:\n          // Check if the last focused element exists, and check that it is not inside button or panel itself\n          if (!previousActiveElementRef.current) return\n          if (state.button?.contains(previousActiveElementRef.current)) return\n          if (state.panel.contains(previousActiveElementRef.current)) return\n\n          // Check if the last focused element is *after* the button in the DOM\n          let focusableElements = getFocusableElements()\n          let previousIdx = focusableElements.indexOf(\n            previousActiveElementRef.current as HTMLElement\n          )\n          let buttonIdx = focusableElements.indexOf(state.button)\n          if (buttonIdx > previousIdx) return\n\n          event.preventDefault()\n          event.stopPropagation()\n          focusIn(state.panel, Focus.Last)\n          break\n      }\n    },\n    [state.popoverState, state.panel, state.button, isWithinPanel]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ClosePopover })\n        state.button?.focus() // Re-focus the original opening Button\n      } else {\n        if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n        state.button?.focus()\n        dispatch({ type: ActionTypes.TogglePopover })\n      }\n    },\n    [\n      dispatch,\n      state.button,\n      state.popoverState,\n      state.buttonId,\n      props.disabled,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? {\n        ref: withinPanelButtonRef,\n        type,\n        onKeyDown: handleKeyDown,\n        onClick: handleClick,\n      }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n        'aria-controls': state.panel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet OverlayRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(\n  props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl> &\n    PropsForFeatures<typeof OverlayRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [{ popoverState }, dispatch] = usePopoverContext([Popover.name, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-popover-overlay-${useId()}`\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return popoverState === PopoverStates.Open\n  })()\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    [dispatch]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible,\n    name: 'Popover.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id' | 'onKeyDown'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures> & {\n      focus?: boolean\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { focus = false, ...passthroughProps } = props\n\n  let [state, dispatch] = usePopoverContext([Popover.name, Panel.name].join('.'))\n  let { close } = usePopoverAPIContext([Popover.name, Panel.name].join('.'))\n\n  let internalPanelRef = useRef<HTMLDivElement | null>(null)\n  let panelRef = useSyncRefs(internalPanelRef, ref, panel => {\n    dispatch({ type: ActionTypes.SetPanel, panel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.popoverState === PopoverStates.Open\n  })()\n\n  let handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return\n          if (!internalPanelRef.current) return\n          if (!internalPanelRef.current.contains(document.activeElement)) return\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.ClosePopover })\n          state.button?.focus()\n          break\n      }\n    },\n    [state, internalPanelRef, dispatch]\n  )\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.SetPanel, panel: null }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (props.static) return\n\n    if (state.popoverState === PopoverStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.SetPanel, panel: null })\n    }\n  }, [state.popoverState, props.unmount, props.static, dispatch])\n\n  // Move focus within panel\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n    if (internalPanelRef.current.contains(activeElement)) return // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First)\n  }, [focus, internalPanelRef, state.popoverState])\n\n  // Handle Tab / Shift+Tab focus positioning\n  useWindowEvent('keydown', event => {\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n    if (event.key !== Keys.Tab) return\n    if (!document.activeElement) return\n    if (!internalPanelRef.current) return\n    if (!internalPanelRef.current.contains(document.activeElement)) return\n\n    // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n    event.preventDefault()\n\n    let result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next)\n\n    if (result === FocusResult.Underflow) {\n      return state.button?.focus()\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return\n\n      let elements = getFocusableElements()\n      let buttonIdx = elements.indexOf(state.button)\n\n      let nextElements = elements\n        .splice(buttonIdx + 1) // Elements after button\n        .filter(element => !internalPanelRef.current?.contains(element)) // Ignore items in panel\n\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First)\n      }\n    }\n  })\n\n  // Handle focus out when we are in special \"focus\" mode\n  useWindowEvent(\n    'focus',\n    () => {\n      if (!focus) return\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!internalPanelRef.current) return\n\n      if (internalPanelRef.current?.contains(document.activeElement as HTMLElement)) return\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <PopoverPanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Popover.Panel',\n      })}\n    </PopoverPanelContext.Provider>\n  )\n})\n\n// ---\n\nlet DEFAULT_GROUP_TAG = 'div' as const\ninterface GroupRenderPropArg {}\ntype GroupPropsWeControl = 'id'\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, GroupRenderPropArg, GroupPropsWeControl>\n) {\n  let groupRef = useRef<HTMLElement | null>(null)\n  let [popovers, setPopovers] = useState<PopoverRegisterBag[]>([])\n\n  let unregisterPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => {\n        let idx = existing.indexOf(registerbag)\n        if (idx !== -1) {\n          let clone = existing.slice()\n          clone.splice(idx, 1)\n          return clone\n        }\n        return existing\n      })\n    },\n    [setPopovers]\n  )\n\n  let registerPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => [...existing, registerbag])\n      return () => unregisterPopover(registerbag)\n    },\n    [setPopovers, unregisterPopover]\n  )\n\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    let element = document.activeElement as HTMLElement\n\n    if (groupRef.current?.contains(element)) return true\n\n    // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n    return popovers.some(bag => {\n      return (\n        document.getElementById(bag.buttonId)?.contains(element) ||\n        document.getElementById(bag.panelId)?.contains(element)\n      )\n    })\n  }, [groupRef, popovers])\n\n  let closeOthers = useCallback(\n    (buttonId: string) => {\n      for (let popover of popovers) {\n        if (popover.buttonId !== buttonId) popover.close()\n      }\n    },\n    [popovers]\n  )\n\n  let contextBag = useMemo<ContextType<typeof PopoverGroupContext>>(\n    () => ({\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup,\n      closeOthers,\n    }),\n    [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]\n  )\n\n  let slot = useMemo<GroupRenderPropArg>(() => ({}), [])\n  let propsWeControl = { ref: groupRef }\n  let passthroughProps = props\n\n  return (\n    <PopoverGroupContext.Provider value={contextBag}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PopoverGroupContext.Provider>\n  )\n}\n\n// ---\n\nPopover.Button = Button\nPopover.Overlay = Overlay\nPopover.Panel = Panel\nPopover.Group = Group\n"]},"metadata":{},"sourceType":"module"}